# -*- coding: utf-8 -*-
"""Aula9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fEr5kzno-Q0Gz8v5r4qG_E-Hb38UQ61T

<a href="#E9MJU4na3gDQ" target="_self">
<button>Ir para Aula 9</button>
</a>

# Aula 07: Análise Exploratória para Modelagem    

*   **Professor:** Paulo Rogério Pires Manseira
*   **Alunos:** Maruan Biasi El Achkar e Ricardo Falcão Schilieper
*   **GitHub:** github.com/manseiracredit

---

# Importar Dataset - Automobile Data Set
**Fonte:** https://archive.ics.uci.edu/dataset/10/automobile
"""

!pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

automobile = fetch_ucirepo(id=10)

"""# Criar Dataframe"""

import pandas as pd

df = automobile.data.features

display(df.head(3))

#  Carregamento e Diagnóstico

display(df.info())

display(df.describe())

display(df.isnull().sum())

# excluir a coluna normalized-losses pois ela tem muitos valores nulos
df = df.drop('normalized-losses', axis=1)
display(df.head())

# excluir as linhas que ainda possuem valores nulos
df = df.dropna()
display(df.head())

# verificar se a limpeza foi realizada cm sucesso
display(df.isnull().sum())

"""# Análise da Variável-Alvo ( price )"""

import seaborn as sns

sns.histplot(df['price'], kde=True)

"""## Interpretação do gráfico acima

O preço médio dos carros é entre 0 e 1. No geral, os preços tendem a ficar ou na média ou acima dela. Sabemos disso pois o gráfico mostra uma assimétria que tende aos valores positivos.

---

### Pergunta para Reflexão:
- A distribuição dos preços é simétrica? Ou é 'puxada' para um dos lados (assimetria)? Isso pode afetar nosso modelo de regressão?

**Resp.:** Não é simétrica. Ela puxa bem mais para o lado positivo (+2 e +3) do que para o lado negativo (-1 e -2). Isso poderia afetar nosso modelo, fazendo com que ele preveja valores mais altos do que o ideal, mas como a assimetria não é gigante, acreditamos que isso não será um problema muito sério nesse caso, mas sim, assimetrias como essa podem acarretar em sérios problemas em modelos de regressão.

---

# Relação entre Variáveis Categóricas e o Preço
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
sns.countplot(x='horsepower', hue='price', data=df, palette=['red', 'orange', 'yellow', 'blue', 'green', 'pink'])
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""## Interpretação do gráfico acima

O gráfico nos mostra que, carros com o preço 3 geralmente tem um motor mais potente, mas no geral, a correlação entre potência e preço não é muito clara. A correlação mais visível nesse gráfico é que nosso dataset possui muito mais carros com poucos cavalos do que com muitos cavalos.

---
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
sns.countplot(x='highway-mpg', hue='price', data=df, palette=['red', 'orange', 'yellow', 'blue', 'green', 'pink'])
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""## Interpretação do gráfico acima

O gráfico nos mostra que, carros com preço 3 tendem a ter consumos piores, isso bate com o gráfico anteior, que mostrava que esses mesmos carros tendem a ter motores mais potentes.

---

### Pergunta para Reflexão
- A relação entre potência e preço parece ser linear? E a relação entre consumo e preço? Qual delas parece ser uma correlação positiva e qual parece ser negativa?

**Resp.:** A relação entre potência e preço não é fortemente linear, mas é possível perceber uma leve tendência à preços mais elevados em carros com mais potência. Já a relação entre consumo e preço é mais clara, mas defitivamente não é linear, o gráfico nos mostra que os carros muito caros tendem a ter consumos piores, já os carros com preços próximos a média de preço tem consumos melhores, enquanto carros abaixo da média tendem a ter consumos um pouco piores.

---

# Relação entre Variáveis Numéricas e o Preço
"""

sns.boxplot(x='price', y='make', data=df)

"""## Interpretação do gráfico acima

O gráfico nos mostra várias coisas interessantes, por exemplo, a montadora toyota tem carros muito baratos e carros muito caros, com várias opções em quase todas as faixas de preço, enquanto por exemplo a Mercedes, costuma fazer carros com preços dentro da média, mas possui modelos (outliers) com valores extremamente elevados.

---
"""

sns.boxplot(x='price', y='body-style', data=df)

"""## Interpretação do gráfico acima

O gráfico acima nos motra que, em média, os carros mais baratos são do tipo "Wagon", mas, se você estiver buscando o carro mais barato de todos, a reposta está no "Sedan", devido aos outliers. O gráfico também mostra que quase todos os conversíveis são extremamente caros.

---

### Pergunta para Reflexão

- Quais fabricantes de carro têm a mediana de preço mais alta? A variabilidade de preços (tamanho da caixa do boxplot) é a mesma para todos os fabricantes?

**Resp.:** As fabricantes "Saab" e "Alfa Romeo" tem as medianas de preços mais altas. Não, a variabilidade não é a mesma para todas, fabricantes como a "Mitsubishi", "Toyota" e "Mercedes Benz" tem variabilidades mais altas, enquanto "Volkswagen" e "BMW" tem variabilidades bem baixas.

---

# Visão Geral com Heatmap
"""

plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.show()

"""## Interpretação do gráfico acima

O gráfico indica várias correlações extremamente interessantes, mas poucas que são relevantes para a nossa métrica alvo. A única variável que tem uma correlação relevante com a métrica alvo preço é o pico máximo de rotações "peak-rpm"

---

# Conclusão

- Com base nesta análise, quais são as 3 a 5 variáveis mais promissoras que você escolheria para treinar um modelo? Justifique sua escolha com base nos gráficos

**Resp.:**
- Fabricante: Pois nos traz informações precisas sobre as faixas de preço dos carros que ela produz.
- Tipo do carro: Pois, parecido com o fabricante, nos traz informações precisas sobre o que esperar do preço de um carro. Por exemplo, conversíveis são sempre caros.
- KM por litro: Baseado no heatmap e countplot, conseguimos ver uma relação que, por mais que fraca, ainda existe e pode nos guiar a melhores resultados.
- Pico de Rotações: O heatmap nos mostra uma clara relação entre peak-rpm e o preço dos carros.
- Horsepower: Parecido com o KM por Litro, a quantidade de cavalos possui uma relação fraca mas existente.

---
---
---

# Aula 09: Modelagem para Regressão

*   **Professor:** Paulo Rogério Pires Manseira
*   **Alunos:** Maruan Biasi El Achkar e Ricardo Falcão Schilieper
*   **GitHub:** github.com/manseiracredit

---

# Parte 1: Preparação dos Dados para Regressão

## Importar Dataset - Automobile Data Set
**Fonte:** https://archive.ics.uci.edu/dataset/10/automobile
"""

!pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

automobile = fetch_ucirepo(id=10)

"""## Criar Dataframe"""

import pandas as pd

df = automobile.data.features

display(df.head(3))

"""---

* Com base na sua conclusão do Aula 07, crie uma lista com os nomes das colunas que você considera mais importantes:

### Lista de variáveis promissoras a partir da análise gráfica no EDA:

* curb-weight
* engine-size
* horsepower
* width
* length
* num-of-cylinders
* wheel-base
"""

features = ["curb-weight", "engine-size", "horsepower", "width", "length", "num-of-cylinders", "wheel-base"]
target = "price"

x = df[features]
y = df[target]

display(x.head(3))
display(y.head(3))

"""## Codificação de Variáveis Categóricas"""

x_encoded = pd.get_dummies(x, drop_first=True)


display(x_encoded.head(3))
display(y.head(3))

print("Shape original de X:")
display(x.shape)
print("--------------")
print("Shape tratato de X:")
display(x_encoded.shape)

x = x_encoded

"""## Pontos de Parada para Discussão em Dupla (Reflexão)

1. Na nossa EDA, quais variáveis mostraram a relação linear mais forte com o preço em um scatter plot? Por que elas são candidatas ideais para um modelo de Regressão Linear?               
**Resp.:** curb-weight e engine-size. São bons candidatos pois tem uma forte relação com a variável alvo "preço". Ou seja, são ótimas indicadoras do preço.


2. Variáveis como  make  (fabricante) são muito importantes, mas têm muitas categorias (mais de 20). Usar  get_dummies  aqui criará muitas colunas novas. Que impacto isso pode ter no nosso modelo? (Introduz a ideia de 'dimensionalidade').                       
**Resp.:** A alta dimensionalidade aumenta muito a complexidade do modelo, deixando ele mais sucetível à overfitting.

# Parte 2: Treinamento e Avaliação de um Modelo de Regressão
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split

# limpar
df_cleaned = df.dropna()

features = ["curb-weight", "engine-size", "horsepower", "width", "length", "num-of-cylinders", "wheel-base"]
target = "price"

x = df_cleaned[features]
y = df_cleaned[target]

# Separar os dados em treino e teste
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print("Shape de x_train:", x_train.shape)
print("Shape de x_test:", x_test.shape)
print("Shape de y_train:", y_train.shape)
print("Shape de y_test:", y_test.shape)

# --- 1. Criando e Treinando o Modelo ---
modelo_regressao = LinearRegression()
modelo_regressao.fit(x_train, y_train)

# --- 2. Fazendo Previsões nos Dados de Teste ---
previsoes = modelo_regressao.predict(x_test)

# --- 3. Avaliando o Desempenho ---
mse = mean_squared_error(y_test, previsoes)
rmse = np.sqrt(mse)

print(f"\nO Erro Quadrático Médio (MSE) do modelo foi: {mse:.2f}")
print(f"A Raiz do Erro Quadrático Médio (RMSE) do modelo foi: {rmse:.2f}")

"""# Parte 3: Interpretando os Resultados e o Erro do Modelo"""

# Para entender se o RMSE é alto ou baixo, vamos compará-lo
# com a média e o desvio padrão do preço.
media_preco = df['price'].mean()
desvio_padrao_preco = df['price'].std()

print(f"Preço médio dos carros no dataset: ${media_preco:.2f}")
print(f"Desvio padrão dos preços: ${desvio_padrao_preco:.2f}")
print(f"RMSE do nosso modelo: ${rmse:.2f}")

# Visualizando as previsões vs. os valores reais
plt.figure(figsize=(8, 8))
sns.scatterplot(x=y_test, y=previsoes)
plt.xlabel("Preços Reais")
plt.ylabel("Previsões do Modelo")
plt.title("Preços Reais vs. Previsões do Modelo")
# Adicionando uma linha de referência: se o modelo fosse perfeito, todos os
# pontos estariam nesta linha
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.show()

"""## Pontos de Parada para Discussão em Dupla (Reflexão)

1. Nosso RMSE de USD XXXX é grande ou pequeno em comparação com o preço médio dos carros? Se o preço médio é  USD 13.000  e nosso erro médio é  USD 3.000 , o que isso diz sobre a utilidade do nosso modelo?              
**Resp.:** Nosso RMSE é de aproximadamente 2500 doláres. O nosso RMSE representa próximo de 18% do valor médio dos carros. Nós consideramos isso um valor médio. Definitivamente não é pequeno, mas também não é grande.
Isso diz que o modelo é útil mas não é perfeito, pode ser melhorado.


2. Olhando o gráfico de "Preços Reais vs. Previsões", os pontos estão próximos da linha vermelha? Onde o modelo parece errar mais: em carros baratos ou em carros caros? O que isso nos diz sobre as limitações do nosso modelo?       
**Resp.:** Não estão próximos. Isso nos diz que temos uma taxa de erro e variabilidade grande. O modelo erra mais em carros caros, até carros de USD 8000 o modelo vai bem, depois disso se perde bastante. Isso nos diz que o nosso modelo é mal distribuido, ele consegue prever bem o preço de carros baratos mas tem dificuldade com carros mais caros.

# Relatório de Conclusão

Um parágrafo explicando:
As features que foram escolhidas e por quê.
O que é o RMSE e o que o valor obtido significa no contexto do problema (ex: "Nosso modelo tem um erro médio de $XXXX ao
prever o preço de um carro").
Uma breve análise sobre a performance do modelo com base no gráfico de dispersão.

**Resp.:** Escolhemos as features a partir da análise do heatmap da aula passada. O RMSE é a dispersão média do modelo em relação ao preço real dos carros. A análise do nosso modelo nos mostrou que ele é um modelo mediano, não é super preciso, mas consegue fazer o trabalho.
"""